import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import styles from '../styles/Home.module.css'
import Item from './components/Item'

const Home: NextPage = () => {
  // Some requirements.
  // 1. The program can accept a single URI or a list of URIs to download [/]
  // 2. It should be possible to configure download location as well as number of retries.
  // 2. It should support HTTP/HTTPS, FTP and SFTP [/]
  // 3. It should be extensible. Please pay attention to how new protocols can be added
  // 4. It should handle retries and partial downloads. If a file fails to fully download then the partial files must be deleted
  // 5. It should support parallel downloads [/]
  // 6. It should handle name clashes. If two different resources have the same name, both should download correctly. If the same resource is downloaded twice, it should overwrite the previous one
  // 7. Program architecture is important.
  // 8. Don't forget about tests.

  const httpURL = 'http://techslides.com/demos/sample-videos/small.mp4';
  const httpsURL = 'https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg';
  const ftpURL = 'ftp://ftp.dlptest.com/';
  const sftpURL = 'sftp://itcsubmit.wustl.edu';


  const [ urls, setUrls ] = useState<string[]>(["",]);
  const [ retries , setRetries ] = useState<number>(0);
  const [ location , setLocation ] = useState<string>('');
  const [ progress , setProgress] = useState<number>(0);

  const onAddNewUrl = () => {
    setUrls([...urls, '']);
  }

  const onRemoveUrl = () => {
    setUrls(urls.slice(0, urls.length - 1));
  }

  const onClickDownload = async () => {
    // axios({
    //     url: 'http://api.dev/file-download', //your url
    //     method: 'GET',
    //     responseType: 'blob', // important
    // }).then((response) => {
    //     const url = window.URL.createObjectURL(new Blob([response.data]));
    //     const link = document.createElement('a');
    //     link.href = url;
    //     link.setAttribute('download', 'file.pdf'); //or any other extension
    //     document.body.appendChild(link);
    //     link.click();
    // });

    fetch('/api/download',{
      method: 'POST',
      headers:{
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        urls: urls,
        options:{
          retries,
          location,
        }
      }),
    }).then((res) => 
      res.json()
    ).then((data) => {
      console.log("result" , data);
    })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Next URL Downloader</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h3 className={styles.title}>
          Welcome to<br/>URL Downloader
        </h3>

        {urls.map((url , index) => {
          const onChange = (text:string) => {
            const newUrls = [...urls];
            newUrls[index] = text;
            setUrls(newUrls);
          }

          return(
            <Item 
              key={index.toString()}
              index={index}
              url={url}
              isLast={index === urls.length - 1}
              multiple={urls.length > 1}
              onChange={onChange} // Require regex to validate url
              onAdd={onAddNewUrl}
              onRemove={onRemoveUrl}         
            />
          )
        })}
        <label >Folder Name</label>
        <input 
          className={styles.input}
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />
        <label >No of retries :</label>
        <input 
          className={styles.input}
          value={retries.toString()}
          onChange={e => setRetries(Number(e.target.value))}
        />
        <button className={styles.button} onClick={onClickDownload} >Download</button>
        <button className={styles.button} >Pause</button>
        <button className={styles.button} >Cancel</button>
       
       
    
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
